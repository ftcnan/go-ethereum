import json
import web3
import time

from web3 import Web3
from web3.contract import ConciseContract
from web3.auto.gethdev import w3

abi = """
 [{"constant": true,"inputs": [],"name": "numFuturesIssued","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "view","type": "function"},{"constant": true,"inputs": [{"name": "","type": "uint256"},{"name": "","type": "uint256"}],"name": "ids","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "view","type": "function"},{"inputs": [{"name": "_token","type": "address"}],"payable": false,"stateMutability": "nonpayable","type": "constructor"},{"anonymous": false,"inputs": [{"indexed": true,"name": "id","type": "uint256"}],"name": "CreatedGasFuture","type": "event"},{"anonymous": false,"inputs": [{"indexed": false,"name": "id","type": "uint256"},{"indexed": false,"name": "price","type": "uint256"}],"name": "AuctionResult","type": "event"},{"constant": false,"inputs": [{"name": "_dex","type": "address"}],"name": "issue","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},{"constant": false,"inputs": [{"name": "_id","type": "uint256"}],"name": "runAuction","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},{"constant": false,"inputs": [],"name": "settle","outputs": [{"name": "","type": "bool"}],"payable": false,"stateMutability": "nonpayable","type": "function"}]
"""

# web3.py instance

# set pre-funded account as sender
try:
    w3.personal.importRawKey("1" * 64, 'the-passphrase')
except:
    pass
w3.personal.unlockAccount(w3.eth.accounts[1], "the-passphrase")
w3.eth.defaultAccount = w3.eth.accounts[1]
w3.eth.sendTransaction({'to': w3.eth.accounts[1], 'from': w3.eth.accounts[0], 'value': 10 ** 70})

print("acct", w3.eth.accounts[1], "nonce", w3.eth.getTransactionCount(w3.eth.accounts[1]))
time.sleep(5)

# Instantiate and deploy contract
Greeter = w3.eth.contract(abi=abi, bytecode="0x6080604052600060025534801561001557600080fd5b50604051602080610a37833981016040525160008054600160a060020a03909216600160a060020a03199092169190911790556109e0806100576000396000f3006080604052600436106100535763ffffffff60e060020a60003504166311da60b481146100585780632ec652961461008157806371e928af146100a85780637d40d0f8146100cb5780639d449d11146100e3575b600080fd5b34801561006457600080fd5b5061006d6100fe565b604080519115158252519081900360200190f35b34801561008d57600080fd5b506100966101d4565b60408051918252519081900360200190f35b3480156100b457600080fd5b506100c9600160a060020a03600435166101da565b005b3480156100d757600080fd5b506100c9600435610246565b3480156100ef57600080fd5b5061009660043560243561044e565b43600090815260016020526040812081805b82548210156101c9576000548354600160a060020a0390911690638df828009085908590811061013c57fe5b90600052602060002001546040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561018057600080fd5b505af1158015610194573d6000803e3d6000fd5b505050506040513d60208110156101aa57600080fd5b505190508015156101be57600093506101ce565b600190910190610110565b600193505b50505090565b60025481565b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038316179055436205573061021561168083018261047e565b61022382619d80018261047e565b610232826202ac60018261047e565b6102418262201480018261047e565b505050565b60035460008054604080517f06fdde0300000000000000000000000000000000000000000000000000000000815290519293600160a060020a0390811693632320ff0493909116916306fdde03916004808301928892919082900301818387803b1580156102b357600080fd5b505af11580156102c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156102f057600080fd5b81019080805164010000000081111561030857600080fd5b8201602081018481111561031b57600080fd5b815164010000000081118282018710171561033557600080fd5b5050929190505050846040518363ffffffff1660e060020a0281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561039357818101518382015260200161037b565b50505050905090810190601f1680156103c05780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156103e057600080fd5b505af11580156103f4573d6000803e3d6000fd5b505050506040513d602081101561040a57600080fd5b5051604080518481526020810183905281519293507f38aaf5277669ffcbe0d58493ef669a8fac83b43942bcb8a0ff4f0ca620d4f743929081900390910190a15050565b60016020528160005260406000208181548110151561046957fe5b90600052602060002001600091509150505481565b60008054604080517fb88c01000000000000000000000000000000000000000000000000000000000081526063198601600482015260248101869052604481018590529051600160a060020a039092169163b88c01009160648181019260209290919082900301818787803b1580156104f657600080fd5b505af115801561050a573d6000803e3d6000fd5b505050506040513d602081101561052057600080fd5b505160008054600354604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101869052905194955091169263095ea7b39260448084019391929182900301818387803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b505060035460008054604080517f06fdde030000000000000000000000000000000000000000000000000000000081529051600160a060020a03948516965063b126e1f8955091909316926306fdde0392600480830193919282900301818387803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561065257600080fd5b81019080805164010000000081111561066a57600080fd5b8201602081018481111561067d57600080fd5b815164010000000081118282018710171561069757600080fd5b5050929190505050836040518363ffffffff1660e060020a0281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156106f55781810151838201526020016106dd565b50505050905090810190601f1680156107225780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505060035460008054604080517f06fdde030000000000000000000000000000000000000000000000000000000081529051600160a060020a03948516965063f55ad60b955091909316926306fdde0392600480830193919282900301818387803b1580156107c457600080fd5b505af11580156107d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561080157600080fd5b81019080805164010000000081111561081957600080fd5b8201602081018481111561082c57600080fd5b815164010000000081118282018710171561084657600080fd5b505092919050505083600060016040518563ffffffff1660e060020a02815260040180806020018060200186815260200185815260200184600102600019168152602001838103835287818151815260200191508051906020019080838360005b838110156108bf5781810151838201526020016108a7565b50505050905090810190601f1680156108ec5780820380516001836020036101000a031916815260200191505b50838103825260038152602001807f45544800000000000000000000000000000000000000000000000000000000008152506020019650505050505050600060405180830381600087803b15801561094357600080fd5b505af1158015610957573d6000803e3d6000fd5b505060028054600190810190915560008681526020828152604080832080549485018155835290822090920185905590518493507f95148bce29213270785e72b2cfe625b7d7f2524ef6b51b567ea9aa5de81fac259250a25050505600a165627a7a723058202767449eebe80af048d5da0a4fafe4466bcee004524fb660669324b04ce453ad0029")

# Submit the transaction that deploys the contract
tx_hash = Greeter.constructor().transact()

# Wait for the transaction to be mined, and get the transaction receipt
tx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)

#print(tx_receipt)
addr = tx_receipt.contractAddress
#print(w3.eth.getCode(addr))
print(addr)

# Create the contract instance with the newly-deployed address
greeter = w3.eth.contract(
    address=tx_receipt.contractAddress,
    abi=abi,
)

# Display the default greeting from the contract


while True:
    tx_hash = greeter.functions.add().transact()

# Wait for transaction to be mined...
    rec = w3.eth.waitForTransactionReceipt(tx_hash)

    print(rec)
    time.sleep(5)

# Display the new greeting value
    print('Updated contract greeting: {}'.format(
        greeter.functions.greeting().call()
    ))
